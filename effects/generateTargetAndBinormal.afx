provide akra.system;

struct VS_IN{
    float4 pos0:POSITION0;
    float4 pos1:POSITION1;
    float4 pos2:POSITION2;
    float2 tex_coord0:TEXCOORD0;
    float2 tex_coord1:TEXCOORD1;
    float2 tex_coord2:TEXCOORD2;
    float position_index : OUT_POSITION_INDEX;
};

struct VS_OUT_TANGENT {
    float4 position : POSITION;
    float3 tangent : TANGENT;
};

struct VS_OUT_BINORMAL {
    float4 position : POSITION;
    float3 binormal : BINORMAL;
};

float2 output_texture_size : OUTPUT_SIZE;

float determinant(float2x2 a){
    float det;
    det = a[0][0] * a[1][1] - a[0][1] * a[1][0];
    return det;
};

float determinant(float3x3 a){
    float det;
    det = a[0][0] * (a[1][1] * a[2][2] - a[1][2] * a[2][1]) -
          a[1][0] * (a[0][1] * a[2][2] - a[0][2] * a[2][1]) +
          a[2][0] * (a[0][1] * a[1][2] - a[0][2] * a[1][1]);
    return det;
};

float determinant(float4x4 mat){
    float det;
    det = a[0][0] * (
                      a[1][1] * (a[2][2] * a[3][3] - a[2][3] * a[3][2]) -
                      a[2][1] * (a[1][2] * a[3][3] - a[1][3] * a[3][2]) +
                      a[3][1] * (a[1][2] * a[2][3] - a[1][3] * a[2][2])
                    ) -
          a[1][0] * (
                      a[0][1] * (a[2][2] * a[3][3] - a[2][3] * a[3][2]) -
                      a[2][1] * (a[0][2] * a[3][3] - a[0][3] * a[3][2]) +
                      a[3][1] * (a[0][2] * a[2][3] - a[0][3] * a[2][2])
                    ) +
          a[2][0] * (
                      a[0][1] * (a[1][2] * a[3][3] - a[1][3] * a[3][2]) -
                      a[1][1] * (a[0][2] * a[3][3] - a[0][3] * a[3][2]) +
                      a[3][1] * (a[0][2] * a[1][3] - a[0][3] * a[1][2])
                    ) -
          a[3][0] * (
                      a[0][1] * (a[1][2] * a[2][3] - a[1][3] * a[2][2]) -
                      a[1][1] * (a[0][2] * a[2][3] - a[0][3] * a[2][2]) +
                      a[2][1] * (a[0][2] * a[1][3] - a[0][3] * a[1][2])
                    );
    return det;
};

float2x2 transpose(float2x2 a) {
    float2x2 r;

    r[0][0] = a[0][0];
    r[1][0] = a[0][1];

    r[0][1] = a[1][0];
    r[1][1] = a[1][1];

    return r;
};

float3x3 transpose(float3x3 a) {
    float3x3 r;

    r[0][0] = a[0][0];
    r[1][0] = a[0][1];
    r[2][0] = a[0][2];

    r[0][1] = a[1][0];
    r[1][1] = a[1][1];
    r[2][1] = a[1][2];

    r[0][2] = a[2][0];
    r[1][2] = a[2][1];
    r[2][2] = a[2][2];

    return r;
};

float4x4 transpose(float4x4 a) {
    float4x4 r;

    r[0][0] = a[0][0];
    r[1][0] = a[0][1];
    r[2][0] = a[0][2];
    r[3][0] = a[0][3];

    r[0][1] = a[1][0];
    r[1][1] = a[1][1];
    r[2][1] = a[1][2];
    r[3][1] = a[1][3];

    r[0][2] = a[2][0];
    r[1][2] = a[2][1];
    r[2][2] = a[2][2];
    r[3][2] = a[2][3];

    r[0][3] = a[3][0];
    r[1][3] = a[3][1];
    r[2][3] = a[3][2];
    r[3][3] = a[3][3];

    return r;
};

float2x2 inverse(float2x2 a) {
    float d = determinant(a);
    float2x2 r;

    r[0][0] = a[1][1];
    r[0][1] = -a[0][1];
    r[1][0] = -a[1][0];
    r[1][1] = a[0][0];

    r /= d;

    return r;
};

float3x3 inverse(float3x3 a) {
    float d = determinant(a);
    float3x3 r;

    r[0][0] =    a[1][1] * a[2][2] - a[1][2] * a[2][1]  ;
    r[0][1] = -( a[1][0] * a[2][2] - a[1][2] * a[2][0] );
    r[0][2] =    a[1][0] * a[2][1] - a[1][1] * a[2][0]  ;

    r[1][0] = -( a[0][1] * a[2][2] - a[0][2] * a[2][1] );
    r[1][1] =    a[0][0] * a[2][2] - a[0][2] * a[2][0]  ;
    r[1][2] = -( a[0][0] * a[2][1] - a[0][1] * a[2][0] );

    r[2][0] =    a[0][1] * a[1][2] - a[0][2] * a[1][1]  ;
    r[2][1] = -( a[0][0] * a[1][2] - a[0][2] * a[1][0] );
    r[2][2] =    a[0][0] * a[1][1] - a[0][1] * a[1][0]  ;

    r = transpose(r);

    r /= d;

    return r;
};


VS_OUT_TANGENT vs_compute_tangent(VS_IN IN){

}


VS_OUT_BINORMAL vs_compute_binormal(VS_IN IN){

}


technique compute_tangent_and_binormal{
    pass compute_tangent{
        VertexShader = compile vs_compute_tangent();
    };
    pass compute_binormal{
        VertexShader = compile vs_compute_binormal();
    };
};