provide akra.system;
use strict;

struct VS_IN{
    float  index: INDEX;
    float  offset: SHIFT;
    float4 value: VALUE;
};
struct VS_OUT{
    float4 col: VARCOLOR;
    float4 pos: POSITION;
};

texture tex0:TEXTURE0;

sampler sourceSampler0:SOURCE0  = sampler_state
{
    Texture = <tex0>;
};

float2 size;

VS_OUT vs_main_1(VS_IN data){
    VS_OUT Out;
    int offset = int(data.offset);
    if (offset != 0) {
        Out.col = tex2D(sourceSampler0,
                        float2((mod(data.index, size.x) +.5 ) / size.x, (floor(data.index / size.x) + .5) / size.y));
        if (offset == 1) {
            Out.col = float4(Out.col.r, data.value.gba);
        }
        else if (offset == 2) {
            Out.col = float4(Out.col.rg, data.value.ba);
        }
        else if (offset == 3) {
            Out.col = float4(Out.col.rgb, data.value.a);
        }
        else if (offset == -1) {
            Out.col = float4(data.value.r, Out.col.gba);
        }
        else if (offset == -2) {
            Out.col = float4(data.value.rg, Out.col.ba);
        }
        else {
            Out.col = float4(data.value.rgb, Out.col.a);
        }
    }
    else {
        Out.col = data.value;
    }
    Out.pos = float4(2. * (mod(data.index, size.x) + .5) / size.x - 1.,
                    2. * (floor(data.index / size.x)  + .5) / size.y - 1., 0., 1.);
    return Out;
}

float4 fs_main_1(VS_OUT data): COLOR{
    return data.col;
}


technique update_video_buffer{
    pass p0 {
        VertexShader = compile vs_main_1();
        PixelShader = compile fs_main_1();
    }
}