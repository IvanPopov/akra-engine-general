provide akra.system;
include "floatSpecialFuntions.afx"

struct base_material{
    float4 diffuse:DIFFUSE;
    float4 ambient:AMBIENT;
    float4 emissive:EMISSIVE;
    float4 specular:SPECULAR;
    float shininess:SHININESS;
};

global float3 Normal;
global base_material Fragment_material;

float4 prepareForDeferredShadingPass1() : COLOR {
	float4 data;

	data.x = float3ToFloat(Fragment_material.emissive.xyz);
	data.y = float3ToFloat(Normal.xy, Fragment_material.shininess);
	data.z = float3ToFloat(Fragment_material.diffuse.xyz);
	data.w = float3ToFloat(Fragment_material.ambient.xyz);

	return data;
};

float4 prepareForDeferredShadingPass2() : COLOR {
	float4 data;

	data.x = float3ToFloat(Fragment_material.specular.xyz);

	return data;
};

float4 simplePrepareForDeferredShadingPass1() : COLOR {
    float4 data;

    data.x = float3ToFloat(Fragment_material.emissive.xyz);

    return data;
};

technique prepareForDeferredShading{
	pass pass1{
		PixelShader = compile prepareForDeferredShadingPass1();
	};
	pass pass2{
		PixelShader = compile prepareForDeferredShadingPass2();
	};
};

technique simplePrepareForDeferredShading{
    pass pass1{
        PixelShader = compile simplePrepareForDeferredShadingPass1();
    };
};